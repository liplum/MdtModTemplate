apply plugin: "java"

version '1.0'

targetCompatibility = 8
sourceCompatibility = 8

sourceSets.main.java.srcDirs = ["src"]

var useKotlin = false

buildscript {
    repositories {
        mavenCentral()
    }
    ext {
        mindustryVersion = 'v135'
        kotlinVersion = "1.6.10"
        sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}
if (useKotlin) {
    apply plugin: "kotlin"

    sourceSets.main.kotlin.srcDirs = ["src"]
}
repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
}

dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    testCompileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    testCompileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
}

task jarAndroid {
    dependsOn "jar"

    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        def paras = "$dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar".toString()
        try {
            "d8 $paras".execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
        } catch (Exception ignored) {
            logger.warn("d8 cannot be found in your PATH, so trying to use an absolute path.")
            def cmdOutput = new ByteArrayOutputStream()
            "where d8".execute().waitForProcessOutput(cmdOutput, System.err)
            def d8FullPath = cmdOutput.toString().replace("\r", "").replace("\n", "")
            logger.info("d8 was found at $d8FullPath")
            "$d8FullPath $paras".execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
        }
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        // add something into your Jar
        include "mod.hjson"
        include "icon.png"
    }

    from("assets/") {
        include "**"
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

def copyJarFile(jarFile, modsFolder) {
    copy {
        from jarFile
        into modsFolder
    }
}

task debugJar {
    dependsOn jar
    doLast {
        var shouldCopy = project.property("AutoCopyModIntoGamePath")
        if (!shouldCopy)
            return
        var jarFile = new File("$buildDir/libs/${project.archivesBaseName}Desktop.jar")
        if (!jarFile.exists()) {
            logger.error("Jar cannot be found at ${jarFile.path}")
            return
        }
        // I only program on Windows.
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            var APPDATA = System.getenv("APPDATA")
            var modsFolder = APPDATA + '/Mindustry/mods'
            mkdir modsFolder
            copyJarFile(jarFile, modsFolder)
            var gamePath = project.property("GamePath")
            if (gamePath) {
                if (new File(gamePath as String).exists()) {
                    logger.info("Mindustry game was found at $gamePath, now it's to be started.")
                    var runtime = Runtime.getRuntime()
                    runtime.exec("explorer.exe $gamePath")
                }
            }
        }
    }
}

task copyJar {
    dependsOn jar
    doLast {
        var shouldCopy = project.property("AutoCopyModIntoGamePath")
        if (!shouldCopy)
            return
        var jarFile = new File("$buildDir/libs/${project.archivesBaseName}Desktop.jar")
        if (!jarFile.exists()) {
            logger.error("Jar cannot be found at ${jarFile.path}")
            return
        }
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            var APPDATA = System.getenv("APPDATA")
            var modsFolder = APPDATA + '/Mindustry/mods'
            mkdir modsFolder
            copyJarFile(jarFile, modsFolder)
        }
    }
}

task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from {
        [
                zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"),
                zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")
        ]
    }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
